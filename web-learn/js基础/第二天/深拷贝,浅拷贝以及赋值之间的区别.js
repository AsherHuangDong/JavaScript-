

/**
 * 浅拷贝和深拷贝
 */
let obj = {
    name: 'jam',
    age: 20,
    arr: {
        sex: 'famale'
    }
}


/**
 * 赋值: 当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，
 * 而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，
 * 其实都是改变的存储空间的内容，因此，两个对象是联动的。
 */
let obj1 = obj
obj1.name = 'qurry'

// 浅拷贝: 只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。
/**
 * 浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。
 * 如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），
 * 拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。
 * 即默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。
 */
// 注意: 当object只有一层的时候(object中没有子对象)，是深拷贝
let obj2 = Object.assign({}, obj)
obj2.age = 40
obj2.arr.sex = 'male' 

// 深拷贝: 深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。
let obj3 = JSON.parse(JSON.stringify(obj))
obj3.name = 'lucky'

console.log('原始值: ', obj)
console.log('赋值: ', obj1)
console.log('浅拷贝: ', obj2)
console.log('深拷贝: ', obj3)
/**
 * 总结: 
 *          和原数据是否直向同一对象     第一层数据为基本数据类型       原数据中包含子对象
 * 
 *   赋值：         是                 改变会使原数据改变            改变会使原数据一起改变
 *   浅拷贝：       否                 改变不会和原数据一起改变       改变会使原数据一起改变
 *   深拷贝：       否                 改变不会和原数据一起改变       改变不会使原数据一起改变
 * 
 * 注意: 使用Object.assign拷贝object对象时，当object只有一层的时候(object中没有子对象)，是深拷贝
 */
